var documenterSearchIndex = {"docs":
[{"location":"simsetup/#Setting-up-a-simulation","page":"Simulation setup","title":"Setting up a simulation","text":"","category":"section"},{"location":"simsetup/","page":"Simulation setup","title":"Simulation setup","text":"How to set up a simulation","category":"page"},{"location":"utilities/#Utility-functions","page":"Code Reference","title":"Utility functions","text":"","category":"section"},{"location":"utilities/","page":"Code Reference","title":"Code Reference","text":"These functions are used internally.","category":"page"},{"location":"utilities/#grids","page":"Code Reference","title":"grids","text":"","category":"section"},{"location":"utilities/","page":"Code Reference","title":"Code Reference","text":"init_grid(Lz, Nz)","category":"page"},{"location":"utilities/#picfun.init_grid-Tuple{Any, Any}","page":"Code Reference","title":"picfun.init_grid","text":"init_grid(Lz, Nz)\n\nConvenience constructor for a 1d grid.\n\n\n\n\n\n","category":"method"},{"location":"utilities/#particles","page":"Code Reference","title":"particles","text":"","category":"section"},{"location":"utilities/","page":"Code Reference","title":"Code Reference","text":"copy(p::particle)\nfix_position!(ptl::particle, L)\n+(::particle, ::particle)\n-(::particle, ::particle)","category":"page"},{"location":"utilities/#Base.copy-Tuple{particle}","page":"Code Reference","title":"Base.copy","text":"copy(p::particle)\n\nReturns a new partilce instance with the same position and velocity as the original particle.\n\n\n\n\n\n","category":"method"},{"location":"utilities/#picfun.fix_position!-Tuple{particle, Any}","page":"Code Reference","title":"picfun.fix_position!","text":"fix_position!(p, L)\n\nMoves a particle's position back into the domain [0:L]\n\n\n\n\n\n","category":"method"},{"location":"utilities/#Base.:+-Tuple{particle, particle}","page":"Code Reference","title":"Base.:+","text":"+(a::particle, b::particle)\n\nAdd position and velocity for particle structs.\n\n\n\n\n\n","category":"method"},{"location":"utilities/#Base.:--Tuple{particle, particle}","page":"Code Reference","title":"Base.:-","text":"-(a::particle, b::particle)\n\nSubtract position and velocity for particle structs.\n\n\n\n\n\n","category":"method"},{"location":"utilities/#","page":"Code Reference","title":"","text":"","category":"section"},{"location":"#picfun.jl-Documentation","page":"Home","title":"picfun.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This repository implements the particle-in-cell (PIC) algorithm described by Chen et al.. The goal of this project is to study  how and where machine learning can be used in PIC codes to accelerate the simulation. Most parts of the code should be differentiable.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This code has been used for arXiv:2110.12444","category":"page"},{"location":"","page":"Home","title":"Home","text":"The documentation is still work in progress. Please check back later or contact the author.","category":"page"}]
}
